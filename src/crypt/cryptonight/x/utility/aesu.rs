//! # AES Utils
//! 
//! This module contains utility functions for AES encryption.

use super::keccaku::keccak;

const AES_BLOCK_SIZE: usize = 16;
const AES_ROUND_KEYS_COUNT: usize = 10;

pub fn aes_round(block: &mut [u8], round_key: &[u8]) {
    for i in 0..AES_BLOCK_SIZE {
        block[i] = block[i] ^ round_key[i];
    }
    sub_bytes(block);
    shift_rows(block);
    mix_columns(block);
}

// Expand Keccak output to AES key
pub fn expand_key(keccak_output: &[u8]) -> Vec<u8> {
    let mut expanded_key = keccak_output[..32].to_vec();
    for i in 1..AES_ROUND_KEYS_COUNT {
        let mut temp = expanded_key[i * AES_BLOCK_SIZE - 4..i * AES_BLOCK_SIZE].to_vec();
        temp.rotate_left(1);
        for byte in temp.iter_mut() {
            *byte = keccak(&[*byte])[0];
        }
        for j in 0..4 {
            expanded_key.push(expanded_key[(i - 1) * AES_BLOCK_SIZE + j] ^ temp[j]);
        }
    }
    expanded_key
}

pub fn sub_bytes(block: &mut [u8]) {
    for byte in block.iter_mut() {
        *byte = s_box(*byte);
    }
}

// ShiftRows step of AES encryption
pub fn shift_rows(block: &mut [u8]) {
    for i in 1..4 {
        let offset = i * 4;
        block[offset..offset + 4].rotate_left(i);
    }
}

// MixColumns step of AES encryption
pub fn mix_columns(block: &mut [u8]) {
    for i in 0..4 {
        let col = [
            block[i],
            block[i + 4],
            block[i + 8],
            block[i + 12],
        ];
        let mixed_col = mix_column(col);
        for j in 0..4 {
            block[i + j * 4] = mixed_col[j];
        }
    }
}

// MixColumn transformation for AES encryption
pub fn mix_column(col: [u8; 4]) -> [u8; 4] {
    let mut mixed_col = [0; 4];
    mixed_col[0] = g_mul(0x02, col[0]) ^ g_mul(0x03, col[1]) ^ col[2] ^ col[3];
    mixed_col[1] = col[0] ^ g_mul(0x02, col[1]) ^ g_mul(0x03, col[2]) ^ col[3];
    mixed_col[2] = col[0] ^ col[1] ^ g_mul(0x02, col[2]) ^ g_mul(0x03, col[3]);
    mixed_col[3] = g_mul(0x03, col[0]) ^ col[1] ^ col[2] ^ g_mul(0x02, col[3]);
    mixed_col
}

// Galois Field multiplication for AES MixColumn
pub fn g_mul(mut a: u8, mut b: u8) -> u8 {
    let mut p = 0;
    let mut hi_bit_set;
    for _ in 0..8 {
        if b & 1 != 0 {
            p ^= a;
        }
        hi_bit_set = a & 0x80 != 0;
        a <<= 1;
        if hi_bit_set {
            a ^= 0x1b; // AES polynomial
        }
        b >>= 1;
    }
    p
}

// Substitution Box (S-box) for AES encryption
pub fn s_box(byte: u8) -> u8 {
    let row = (byte >> 4) as usize;
    let col = (byte & 0x0F) as usize;
    S_BOX[row * 16 + col]
}

// AES S-box (Magic byte array)
const S_BOX: [u8; 256] = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
];